<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	     xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         id="WebApp_ID" version="3.1" metadata-complete="true">

	<display-name>Admin GUI console application</display-name>

	<listener>
        <description>
            Listen for session create/destroy and publish spring events to root application context.
            Used by ZK.
        </description>
		<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
	</listener>

	<listener>
		<listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>
	</listener>
	<context-param>
        <description>Config location used by LogbackConfigListener</description>
		<param-name>logbackConfigLocation</param-name>
		<param-value>classpath:logback.xml</param-value>
	</context-param>

    <listener>
        <description>
            Called right after servlet context created(start application).
            Performs the actual initialization work for the root application context
        </description>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
    <context-param>
        <description>
            Config location for the root contex used by ContextLoaderListener.
            Context initialize all general application parts(not web or other specific parts) on application start
        </description>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring/app-context.xml</param-value>
    </context-param>

    <!-- used only to add session scope for zk application
         (in clean mvc application where is filter with the same functionality) -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

	<listener>
		<description>Clean up desktops(ZK) that a session owns(session cleanup)</description>
		<listener-class>org.zkoss.zk.ui.http.HttpSessionListener</listener-class>
	</listener>

	<servlet>
        <description>Automatic dsp resources interpretation(get css result) on request</description>
		<servlet-name>dspLoader</servlet-name>
		<servlet-class>org.zkoss.web.servlet.dsp.InterpreterServlet</servlet-class>
		<init-param>
			<param-name>class-resource</param-name>
			<param-value>true</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>dspLoader</servlet-name>
		<url-pattern>*.dsp</url-pattern>
	</servlet-mapping>

	<servlet>
		<description>ZK loader for ZUML pages(get html from requested zuml page)</description>
		<servlet-name>zkLoader</servlet-name>
		<servlet-class>org.zkoss.zk.ui.http.DHtmlLayoutServlet</servlet-class>
		<init-param>
			<param-name>update-uri</param-name>
			<param-value>/zkau</param-value>
		</init-param>
		<init-param>
			<param-name>log-level</param-name>
			<param-value>DEBUG</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>zkLoader</servlet-name>
		<url-pattern>*.zul</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>zkLoader</servlet-name>
		<url-pattern>*.zhtml</url-pattern>
	</servlet-mapping>

    <servlet>
		<description>The asynchronous update engine for ZK(update requests from ZUML pages)</description>
		<servlet-name>auEngine</servlet-name>
		<servlet-class>org.zkoss.zk.au.http.DHtmlUpdateServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>auEngine</servlet-name>
		<url-pattern>/zkau/*</url-pattern>
	</servlet-mapping>

	<servlet>
        <description>Mvc context configuration/web tear beans: controllers etc.</description>
		<servlet-name>springMvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/mvc.xml</param-value>
		</init-param>
		<load-on-startup>5</load-on-startup><!-- loaded on app start -->
	</servlet>
    <servlet-mapping>
        <servlet-name>springMvc</servlet-name>
        <url-pattern>/login/*</url-pattern>
		<url-pattern>/static/*</url-pattern> <!--get record file by url (controller RecordLoader)-->
    </servlet-mapping>

	<filter>
        <description>Standart filter used as delegate to spring security filters declared inside application context(xml-config)</description>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

    <!-- application default start page -->
	<welcome-file-list>
        <welcome-file>/content/index.zul</welcome-file>
	</welcome-file-list>

	<!-- web server caught error and show on page general_error.zul -->
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/content/error/general_error.zul</location>
	</error-page>

    <!-- default 30 min -->
	<!-- set no session timeout -->
	<session-config>
		<session-timeout>-1</session-timeout>
	</session-config>

</web-app>
