<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
				   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				   xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    			   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.0.xsd
    								   http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">
    							
    <changeSet id="1" author="i.leontyev@gmail.com" runOnChange="true" context="test" dbms="postgresql">
		<createProcedure>
			DROP FUNCTION IF EXISTS voip_provider_save(provider_entry, integer);
		
			CREATE OR REPLACE FUNCTION voip_provider_save(p_entry provider_entry, p_user_id integer)
			  RETURNS provider_entry AS
			$BODY$
			DECLARE
			  	p_id integer;
			BEGIN
				p_id = p_entry.id;
			
				IF p_id > 0 THEN
					UPDATE provider
				    	SET callerid = p_entry.callerid,
				        callerid_set = p_entry.callerid_set,
				        description = p_entry.description,
				        tech = p_entry.tech
				        WHERE id = p_id;
				ELSE
					INSERT INTO provider
				    	(callerid, callerid_set, tech, description, user_id)
				        	VALUES (p_entry.callerid, p_entry.callerid_set, p_entry.tech, p_entry.description, p_user_id)
				        RETURNING id INTO p_id;
				END IF;
			
				RETURN voip_provider_get(p_id);
			END;
			$BODY$
			  LANGUAGE plpgsql VOLATILE;
    	</createProcedure>
    	<sql>
            ALTER FUNCTION voip_provider_save(provider_entry, integer) OWNER TO ${jdbc.username};
        </sql>
        <rollback>
        	DROP FUNCTION voip_provider_save(provider_entry, integer);
        </rollback>
    </changeSet>
    
 	<changeSet id="2" author="i.leontyev@gmail.com" runOnChange="true" context="test" dbms="postgresql">
		<createProcedure>
			DROP FUNCTION IF EXISTS voip_provider_get(integer, boolean);
			
			CREATE OR REPLACE FUNCTION voip_provider_get(p_id integer DEFAULT NULL::integer, p_light boolean DEFAULT FALSE)
			  RETURNS provider_entry AS
			$BODY$
			DECLARE
				p provider_entry;
			    p_rec record;
			BEGIN
				IF p_id IS NOT NULL THEN
					SELECT v.*, u.login AS user_login INTO p_rec
						FROM provider v
					    LEFT JOIN "user" u ON u.id = v.user_id
					    WHERE v.id = p_id;
					IF FOUND THEN
						p.id = p_rec.id;
					    p.callerid = p_rec.callerid;
					    p.callerid_set = p_rec.callerid_set;
					    p.created = p_rec.created;
					    p.user_id = p_rec.user_id;
					    p.user_login = p_rec.user_login;
					    p.tech = p_rec.tech;
					    p.description = p_rec.description;
					ELSE
						RAISE EXCEPTION 'RESULT:20;';
					END IF;
				ELSE
					p.id = 0;
				    p.callerid_set = TRUE;
				    p.description = ''::text;
				    p.tech = ''::text;
				    p.callerid = ''::text;
				END IF;
			
				RETURN p;
			END;
			$BODY$
			  LANGUAGE plpgsql VOLATILE;
    	</createProcedure>
    	<sql>
            ALTER FUNCTION voip_provider_get(integer, boolean) OWNER TO ${jdbc.username};
        </sql>
        <rollback>
        	DROP FUNCTION voip_provider_get(integer, boolean);
        </rollback>
    </changeSet>
     
 	<changeSet id="3" author="i.leontyev@gmail.com" runOnChange="true" context="test" dbms="postgresql">
		<createProcedure>
			DROP FUNCTION IF EXISTS voip_provider_get_list(in p_filter result_filter);
		
			CREATE OR REPLACE FUNCTION voip_provider_get_list(p_filter result_filter)
			  RETURNS SETOF provider_entry AS
			$BODY$
			DECLARE
				p_id integer;
			BEGIN
				FOR p_id IN SELECT id FROM provider ORDER BY id DESC
				LOOP
					RETURN NEXT voip_provider_get(p_id);
				END LOOP;
			END;
			$BODY$
			  LANGUAGE plpgsql VOLATILE;
    	</createProcedure>
    	<sql>
            ALTER FUNCTION voip_provider_get_list(in p_filter result_filter) OWNER TO ${jdbc.username};
        </sql>
        <rollback>
        	DROP FUNCTION voip_provider_get_list(in p_filter result_filter);
        </rollback>
    </changeSet>     
     
 	<changeSet id="4" author="i.leontyev@gmail.com" runOnChange="true" context="test" dbms="postgresql">
		<createProcedure>
			DROP FUNCTION IF EXISTS voip_provider_delete(p_id integer);
			
			CREATE OR REPLACE FUNCTION voip_provider_delete(p_id integer)
			  RETURNS void AS
			$BODY$
						BEGIN
							DELETE FROM provider a where a.id = p_id;
						END;
						$BODY$
			  LANGUAGE plpgsql VOLATILE;
    	</createProcedure>
    	<sql>
            ALTER FUNCTION voip_provider_delete(integer) OWNER TO ${jdbc.username};
        </sql>
        <rollback>
        	DROP FUNCTION voip_provider_delete(integer);
        </rollback>
    </changeSet>
       
     

 
</databaseChangeLog>